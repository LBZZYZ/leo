// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Base.proto

#include "IM.Base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace IM {
namespace Base {
}  // namespace Base
}  // namespace IM
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_IM_2eBase_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_IM_2eBase_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_IM_2eBase_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_IM_2eBase_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_IM_2eBase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rIM.Base.proto\022\007IM.Base*+\n\tServiceID\022\017\n"
  "\013SID_DEFAULT\020\000\022\r\n\tSID_LOGIN\020\001*\335\003\n\nLoginC"
  "mdID\022\030\n\024CID_LOGIN_RQ_DEFAULT\020\000\022\027\n\023CID_LO"
  "GIN_RQ_SERVER\020\001\022\027\n\023CID_LOGIN_RS_SERVER\020\002"
  "\022\032\n\026CID_LOGIN_RQ_USERLOGIN\020\003\022\032\n\026CID_LOGI"
  "N_RS_USERLOGIN\020\004\022\027\n\023CID_LOGIN_RQ_LOGOUT\020"
  "\005\022\027\n\023CID_LOGIN_RS_LOGOUT\020\006\022\027\n\023CID_LOGIN_"
  "KICK_USER\020\007\022\034\n\030CID_LOGIN_RQ_DEVICETOKEN\020"
  "\010\022\034\n\030CID_LOGIN_RS_DEVICETOKEN\020\t\022\037\n\033CID_L"
  "OGIN_RQ_KICK_PC_CLIENT\020\n\022\037\n\033CID_LOGIN_RS"
  "_KICK_PC_CLIENT\020\013\022\034\n\030CID_LOGIN_RQ_PUSH_S"
  "HIELD\020\014\022\034\n\030CID_LOGIN_RS_PUSH_SHIELD\020\r\022\"\n"
  "\036CID_LOGIN_RQ_QUERY_PUSH_SHIELD\020\016\022\"\n\036CID"
  "_LOGIN_RS_QUERY_PUSH_SHIELD\020\017*\230\001\n\nClient"
  "Type\022\027\n\023CLIENT_TYPE_DEFAULT\020\000\022\027\n\023CLIENT_"
  "TYPE_WINDOWS\020\001\022\023\n\017CLIENT_TYPE_MAC\020\002\022\025\n\021C"
  "LIENT_TYPE_LINUX\020\003\022\027\n\023CLIENT_TYPE_ANDROI"
  "D\020\004\022\023\n\017CLIENT_TYPE_IOS\020\005*\203\001\n\nUserStatus\022"
  "\027\n\023USER_STATUS_DEFAULT\020\000\022\026\n\022USER_STATUS_"
  "ONLINE\020\001\022\024\n\020USER_STATUS_BUSY\020\002\022\027\n\023USER_S"
  "TATUS_OFFLINE\020\003\022\025\n\021USER_STATUS_LEAVE\020\004*\330"
  "\001\n\007MsgType\022\024\n\020MSG_TYPE_DEFAULT\020\000\022\030\n\024MSG_"
  "TYPE_SINGLE_TEXT\020\001\022\031\n\025MSG_TYPE_SINGLE_AU"
  "DIO\020\002\022\031\n\025MSG_TYPE_SINGLE_VIDEO\020\003\022\031\n\025MSG_"
  "TYPE_SINGLE_PHOTO\020\004\022\030\n\024MSG_TYPE_GROUP_AU"
  "DIO\020\005\022\030\n\024MSG_TYPE_GROUP_VIDEO\020\006\022\030\n\024MSG_T"
  "YPE_GROUP_PHOTO\020\007b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_IM_2eBase_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_IM_2eBase_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_IM_2eBase_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IM_2eBase_2eproto = {
  false, false, descriptor_table_protodef_IM_2eBase_2eproto, "IM.Base.proto", 1065,
  &descriptor_table_IM_2eBase_2eproto_once, descriptor_table_IM_2eBase_2eproto_sccs, descriptor_table_IM_2eBase_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_IM_2eBase_2eproto::offsets,
  file_level_metadata_IM_2eBase_2eproto, 0, file_level_enum_descriptors_IM_2eBase_2eproto, file_level_service_descriptors_IM_2eBase_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_IM_2eBase_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_IM_2eBase_2eproto)), true);
namespace IM {
namespace Base {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_IM_2eBase_2eproto);
  return file_level_enum_descriptors_IM_2eBase_2eproto[0];
}
bool ServiceID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginCmdID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_IM_2eBase_2eproto);
  return file_level_enum_descriptors_IM_2eBase_2eproto[1];
}
bool LoginCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_IM_2eBase_2eproto);
  return file_level_enum_descriptors_IM_2eBase_2eproto[2];
}
bool ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_IM_2eBase_2eproto);
  return file_level_enum_descriptors_IM_2eBase_2eproto[3];
}
bool UserStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_IM_2eBase_2eproto);
  return file_level_enum_descriptors_IM_2eBase_2eproto[4];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Base
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
