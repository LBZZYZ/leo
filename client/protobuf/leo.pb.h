// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: leo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_leo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_leo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_leo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_leo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_leo_2eproto;
namespace UserData {
class Owner;
class OwnerDefaultTypeInternal;
extern OwnerDefaultTypeInternal _Owner_default_instance_;
}  // namespace UserData
PROTOBUF_NAMESPACE_OPEN
template<> ::UserData::Owner* Arena::CreateMaybeMessage<::UserData::Owner>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace UserData {

// ===================================================================

class Owner PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserData.Owner) */ {
 public:
  inline Owner() : Owner(nullptr) {}
  virtual ~Owner();

  Owner(const Owner& from);
  Owner(Owner&& from) noexcept
    : Owner() {
    *this = ::std::move(from);
  }

  inline Owner& operator=(const Owner& from) {
    CopyFrom(from);
    return *this;
  }
  inline Owner& operator=(Owner&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Owner& default_instance();

  static inline const Owner* internal_default_instance() {
    return reinterpret_cast<const Owner*>(
               &_Owner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Owner& a, Owner& b) {
    a.Swap(&b);
  }
  inline void Swap(Owner* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Owner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Owner* New() const final {
    return CreateMaybeMessage<Owner>(nullptr);
  }

  Owner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Owner>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Owner& from);
  void MergeFrom(const Owner& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Owner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserData.Owner";
  }
  protected:
  explicit Owner(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_leo_2eproto);
    return ::descriptor_table_leo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kPhoneFieldNumber = 3,
    kBirthFieldNumber = 5,
    kSignatureFieldNumber = 6,
    kAvatarFieldNumber = 7,
    kSexFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string phone = 3;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string birth = 5;
  void clear_birth();
  const std::string& birth() const;
  void set_birth(const std::string& value);
  void set_birth(std::string&& value);
  void set_birth(const char* value);
  void set_birth(const char* value, size_t size);
  std::string* mutable_birth();
  std::string* release_birth();
  void set_allocated_birth(std::string* birth);
  private:
  const std::string& _internal_birth() const;
  void _internal_set_birth(const std::string& value);
  std::string* _internal_mutable_birth();
  public:

  // string signature = 6;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes avatar = 7;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const void* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // bool sex = 4;
  void clear_sex();
  bool sex() const;
  void set_sex(bool value);
  private:
  bool _internal_sex() const;
  void _internal_set_sex(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UserData.Owner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  bool sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_leo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Owner

// string name = 1;
inline void Owner::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Owner::name() const {
  // @@protoc_insertion_point(field_get:UserData.Owner.name)
  return _internal_name();
}
inline void Owner::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:UserData.Owner.name)
}
inline std::string* Owner::mutable_name() {
  // @@protoc_insertion_point(field_mutable:UserData.Owner.name)
  return _internal_mutable_name();
}
inline const std::string& Owner::_internal_name() const {
  return name_.Get();
}
inline void Owner::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Owner::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserData.Owner.name)
}
inline void Owner::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserData.Owner.name)
}
inline void Owner::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserData.Owner.name)
}
inline std::string* Owner::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Owner::release_name() {
  // @@protoc_insertion_point(field_release:UserData.Owner.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Owner::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserData.Owner.name)
}

// string password = 2;
inline void Owner::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& Owner::password() const {
  // @@protoc_insertion_point(field_get:UserData.Owner.password)
  return _internal_password();
}
inline void Owner::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:UserData.Owner.password)
}
inline std::string* Owner::mutable_password() {
  // @@protoc_insertion_point(field_mutable:UserData.Owner.password)
  return _internal_mutable_password();
}
inline const std::string& Owner::_internal_password() const {
  return password_.Get();
}
inline void Owner::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Owner::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserData.Owner.password)
}
inline void Owner::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserData.Owner.password)
}
inline void Owner::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserData.Owner.password)
}
inline std::string* Owner::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Owner::release_password() {
  // @@protoc_insertion_point(field_release:UserData.Owner.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Owner::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserData.Owner.password)
}

// string phone = 3;
inline void Owner::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& Owner::phone() const {
  // @@protoc_insertion_point(field_get:UserData.Owner.phone)
  return _internal_phone();
}
inline void Owner::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:UserData.Owner.phone)
}
inline std::string* Owner::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:UserData.Owner.phone)
  return _internal_mutable_phone();
}
inline const std::string& Owner::_internal_phone() const {
  return phone_.Get();
}
inline void Owner::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Owner::set_phone(std::string&& value) {
  
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserData.Owner.phone)
}
inline void Owner::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserData.Owner.phone)
}
inline void Owner::set_phone(const char* value,
    size_t size) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserData.Owner.phone)
}
inline std::string* Owner::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Owner::release_phone() {
  // @@protoc_insertion_point(field_release:UserData.Owner.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Owner::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserData.Owner.phone)
}

// bool sex = 4;
inline void Owner::clear_sex() {
  sex_ = false;
}
inline bool Owner::_internal_sex() const {
  return sex_;
}
inline bool Owner::sex() const {
  // @@protoc_insertion_point(field_get:UserData.Owner.sex)
  return _internal_sex();
}
inline void Owner::_internal_set_sex(bool value) {
  
  sex_ = value;
}
inline void Owner::set_sex(bool value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:UserData.Owner.sex)
}

// string birth = 5;
inline void Owner::clear_birth() {
  birth_.ClearToEmpty();
}
inline const std::string& Owner::birth() const {
  // @@protoc_insertion_point(field_get:UserData.Owner.birth)
  return _internal_birth();
}
inline void Owner::set_birth(const std::string& value) {
  _internal_set_birth(value);
  // @@protoc_insertion_point(field_set:UserData.Owner.birth)
}
inline std::string* Owner::mutable_birth() {
  // @@protoc_insertion_point(field_mutable:UserData.Owner.birth)
  return _internal_mutable_birth();
}
inline const std::string& Owner::_internal_birth() const {
  return birth_.Get();
}
inline void Owner::_internal_set_birth(const std::string& value) {
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Owner::set_birth(std::string&& value) {
  
  birth_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserData.Owner.birth)
}
inline void Owner::set_birth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserData.Owner.birth)
}
inline void Owner::set_birth(const char* value,
    size_t size) {
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserData.Owner.birth)
}
inline std::string* Owner::_internal_mutable_birth() {
  
  return birth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Owner::release_birth() {
  // @@protoc_insertion_point(field_release:UserData.Owner.birth)
  return birth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Owner::set_allocated_birth(std::string* birth) {
  if (birth != nullptr) {
    
  } else {
    
  }
  birth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), birth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserData.Owner.birth)
}

// string signature = 6;
inline void Owner::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& Owner::signature() const {
  // @@protoc_insertion_point(field_get:UserData.Owner.signature)
  return _internal_signature();
}
inline void Owner::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:UserData.Owner.signature)
}
inline std::string* Owner::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:UserData.Owner.signature)
  return _internal_mutable_signature();
}
inline const std::string& Owner::_internal_signature() const {
  return signature_.Get();
}
inline void Owner::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Owner::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserData.Owner.signature)
}
inline void Owner::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserData.Owner.signature)
}
inline void Owner::set_signature(const char* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserData.Owner.signature)
}
inline std::string* Owner::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Owner::release_signature() {
  // @@protoc_insertion_point(field_release:UserData.Owner.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Owner::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserData.Owner.signature)
}

// bytes avatar = 7;
inline void Owner::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& Owner::avatar() const {
  // @@protoc_insertion_point(field_get:UserData.Owner.avatar)
  return _internal_avatar();
}
inline void Owner::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:UserData.Owner.avatar)
}
inline std::string* Owner::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:UserData.Owner.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& Owner::_internal_avatar() const {
  return avatar_.Get();
}
inline void Owner::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Owner::set_avatar(std::string&& value) {
  
  avatar_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserData.Owner.avatar)
}
inline void Owner::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserData.Owner.avatar)
}
inline void Owner::set_avatar(const void* value,
    size_t size) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserData.Owner.avatar)
}
inline std::string* Owner::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Owner::release_avatar() {
  // @@protoc_insertion_point(field_release:UserData.Owner.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Owner::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserData.Owner.avatar)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace UserData

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_leo_2eproto
